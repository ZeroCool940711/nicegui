import multiprocessing
import os
import sys
from pathlib import Path
from typing import Any, List, Literal, Optional, Tuple, Union

from starlette.routing import Route
from uvicorn.main import STARTUP_FAILURE
from uvicorn.supervisors import ChangeReload, Multiprocess

import __main__

from . import core, helpers
from . import native as native_module
from .air import Air
from .client import Client
from .language import Language
from .logging import log
from .server import CustomServerConfig, Server

APP_IMPORT_STRING = 'nicegui:app'


def run(*,
        host: Optional[str] = None,
        port: Optional[int] = None,
        title: str = 'NiceGUI',
        viewport: str = 'width=device-width, initial-scale=1',
        favicon: Optional[Union[str, Path]] = None,
        dark: Optional[bool] = False,
        language: Language = 'en-US',
        binding_refresh_interval: float = 0.1,
        reconnect_timeout: float = 3.0,
        show: bool = True,
        on_air: Optional[Union[str, Literal[True]]] = None,
        native: bool = False,
        window_size: Optional[Tuple[int, int]] = None,
        fullscreen: bool = False,
        frameless: bool = False,
        reload: bool = True,
        uvicorn_logging_level: str = 'warning',
        uvicorn_reload_dirs: str = '.',
        uvicorn_reload_includes: str = '*.py',
        uvicorn_reload_excludes: str = '.*, .py[cod], .sw.*, ~*',
        tailwind: bool = True,
        prod_js: bool = True,
        endpoint_documentation: Literal['none', 'internal', 'page', 'all'] = 'none',
        storage_secret: Optional[str] = None,
        show_welcome_message: bool = True,
        **kwargs: Any,
        ) -> None:
    """
    Start the NiceGUI application.

    This function starts the NiceGUI application with the specified configuration options.

    Args:
        host (Optional[str]): The host to start the server with. Defaults to `'127.0.0.1'` in native mode, otherwise `'0.0.0.0'`.
        port (Optional[int]): The port to use. Defaults to `8080` in normal mode, and an automatically determined open port in native mode.
        title (str): The page title. Defaults to `'NiceGUI'`, but can be overwritten per page.
        viewport (str): The page meta viewport content. Defaults to `'width=device-width, initial-scale=1'`, but can be overwritten per page.
        favicon (Optional[Union[str, Path]]): The relative filepath or absolute URL to a favicon. Defaults to `None`, which uses the NiceGUI icon. Can also be an emoji (e.g. `'ðŸš€'`).
        dark (Optional[bool]): Whether to use Quasar's dark mode. Defaults to `False`, use `None` for "auto" mode.
        language (Language): The language for Quasar elements. Defaults to `'en-US'`.
        binding_refresh_interval (float): The time between binding updates in seconds. Defaults to `0.1` seconds.
        reconnect_timeout (float): The maximum time the server waits for the browser to reconnect in seconds. Defaults to `3.0` seconds.
        show (bool): Whether to automatically open the UI in a browser tab. Defaults to `True`.
        on_air (Optional[Union[str, Literal[True]]]): Tech preview: allows temporary remote access if set to `True`. Defaults to disabled.
        native (bool): Whether to open the UI in a native window of size 800x600. Defaults to `False`, deactivates `show`, and automatically finds an open port.
        window_size (Optional[Tuple[int, int]]): The size of the native window as a tuple of width and height. Defaults to `None`, but also activates `native`.
        fullscreen (bool): Whether to open the UI in a fullscreen window. Defaults to `False`, but also activates `native`.
        frameless (bool): Whether to open the UI in a frameless window. Defaults to `False`, but also activates `native`.
        reload (bool): Whether to automatically reload the UI on file changes. Defaults to `True`.
        uvicorn_logging_level (str): The logging level for the uvicorn server. Defaults to `'warning'`.
        uvicorn_reload_dirs (str): A string with comma-separated list of directories to be monitored for reload. Defaults to the current working directory only.
        uvicorn_reload_includes (str): A string with comma-separated list of glob-patterns which trigger reload on modification. Defaults to `'*.py'`.
        uvicorn_reload_excludes (str): A string with comma-separated list of glob-patterns which should be ignored for reload. Defaults to `'.*, .py[cod], .sw.*, ~*'`.
        tailwind (bool): Whether to use Tailwind (experimental). Defaults to `True`.
        prod_js (bool): Whether to use the production version of Vue and Quasar dependencies. Defaults to `True`.
        endpoint_documentation (Literal['none', 'internal', 'page', 'all']): Control what endpoints appear in the autogenerated OpenAPI docs. Defaults to `'none'`, options are `'none'`, `'internal'`, `'page'`, `'all'`.
        storage_secret (Optional[str]): The secret key for browser-based storage. Defaults to `None`, but a value is required to enable `ui.storage.individual` and `ui.storage.browser`.
        show_welcome_message (bool): Whether to show the welcome message. Defaults to `True`.
        **kwargs (Any): Additional keyword arguments passed to `uvicorn.run`.

    Returns:
        None

    Raises:
        ValueError: If NiceGUI does not support multiple workers yet.

    """
    core.app.config.add_run_config(
        reload=reload,
        title=title,
        viewport=viewport,
        favicon=favicon,
        dark=dark,
        language=language,
        binding_refresh_interval=binding_refresh_interval,
        reconnect_timeout=reconnect_timeout,
        tailwind=tailwind,
        prod_js=prod_js,
        show_welcome_message=show_welcome_message,
    )
    core.app.config.endpoint_documentation = endpoint_documentation

    for route in core.app.routes:
        if not isinstance(route, Route):
            continue
        if route.path.startswith('/_nicegui') and hasattr(route, 'methods'):
            route.include_in_schema = endpoint_documentation in {'internal', 'all'}
        if route.path == '/' or route.path in Client.page_routes.values():
            route.include_in_schema = endpoint_documentation in {'page', 'all'}

    if on_air:
        core.air = Air('' if on_air is True else on_air)

    if multiprocessing.current_process().name != 'MainProcess':
        return

    if reload and not hasattr(__main__, '__file__'):
        log.warning('auto-reloading is only supported when running from a file')
        core.app.config.reload = reload = False

    if fullscreen:
        native = True
    if frameless:
        native = True
    if window_size:
        native = True
    if native:
        show = False
        host = host or '127.0.0.1'
        port = port or native_module.find_open_port()
        width, height = window_size or (800, 600)
        native_module.activate(host, port, title, width, height, fullscreen, frameless)
    else:
        port = port or 8080
        host = host or '0.0.0.0'
    assert host is not None
    assert port is not None

    # NOTE: We save host and port in environment variables so the subprocess started in reload mode can access them.
    os.environ['NICEGUI_HOST'] = host
    os.environ['NICEGUI_PORT'] = str(port)

    if show:
        helpers.schedule_browser(host, port)

    def split_args(args: str) -> List[str]:
        return [a.strip() for a in args.split(',')]

    if kwargs.get('workers', 1) > 1:
        raise ValueError('NiceGUI does not support multiple workers yet.')

    # NOTE: The following lines are basically a copy of `uvicorn.run`, but keep a reference to the `server`.

    config = CustomServerConfig(
        APP_IMPORT_STRING if reload else core.app,
        host=host,
        port=port,
        reload=reload,
        reload_includes=split_args(uvicorn_reload_includes) if reload else None,
        reload_excludes=split_args(uvicorn_reload_excludes) if reload else None,
        reload_dirs=split_args(uvicorn_reload_dirs) if reload else None,
        log_level=uvicorn_logging_level,
        **kwargs,
    )
    config.storage_secret = storage_secret
    config.method_queue = native_module.method_queue if native else None
    config.response_queue = native_module.response_queue if native else None
    Server.create_singleton(config)

    if (reload or config.workers > 1) and not isinstance(config.app, str):
        log.warning('You must pass the application as an import string to enable "reload" or "workers".')
        sys.exit(1)

    if config.should_reload:
        sock = config.bind_socket()
        ChangeReload(config, target=Server.instance.run, sockets=[sock]).run()
    elif config.workers > 1:
        sock = config.bind_socket()
        Multiprocess(config, target=Server.instance.run, sockets=[sock]).run()
    else:
        Server.instance.run()
    if config.uds:
        os.remove(config.uds)  # pragma: py-win32

    if not Server.instance.started and not config.should_reload and config.workers == 1:
        sys.exit(STARTUP_FAILURE)
