#!/usr/bin/env python3
"""This is just a simple authentication example.

Please see the [OAuth2 example at FastAPI ](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/)  or
use the great [Authlib package ](https://docs.authlib.org/en/v0.13/client/starlette.html#using-fastapi) to implement a classing real authentication system.
Here we just demonstrate the NiceGUI integration.
"""
from typing import Callable, Optional

from fastapi import Request
from fastapi.responses import RedirectResponse
from starlette.middleware.base import BaseHTTPMiddleware

from nicegui import Client, app, ui

# in reality users passwords would obviously need to be hashed
passwords = {"user1": "pass1", "user2": "pass2"}

unrestricted_page_routes = {"/login"}


class AuthMiddleware(BaseHTTPMiddleware):
    """Middleware that restricts access to all NiceGUI pages.

    This middleware checks if the user is authenticated before allowing access to NiceGUI pages.
    If the user is not authenticated, they are redirected to the login page.

    Attributes:
        app (NiceGUI): The NiceGUI application instance.
        unrestricted_page_routes (list): A list of unrestricted page routes.

    Methods:
        dispatch(request: Request, call_next: Callable): Processes the incoming request and calls the next middleware or route handler.
    """

    async def dispatch(self, request: Request, call_next: Callable):
        """Processes the incoming request and calls the next middleware or route handler.

        Args:
            request (Request): The incoming request.
            call_next (Callable): The next middleware or route handler to be called.

        Returns:
            Response: The response generated by the next middleware or route handler.
        """
        if not app.storage.user.get("authenticated", False):
            if (
                request.url.path in Client.page_routes.values()
                and request.url.path not in unrestricted_page_routes
            ):
                app.storage.user[
                    "referrer_path"
                ] = request.url.path  # remember where the user wanted to go
                return RedirectResponse("/login")
        return await call_next(request)


app.add_middleware(AuthMiddleware)


@ui.page("/")
def main_page() -> None:
    """
    Renders the main page of the application.

    This function creates a UI column and adds a label and a button to it. The label displays a greeting message
    with the username of the logged-in user, retrieved from the app's storage. The button, when clicked, clears
    the user data from the storage and opens the login page.

    Usage:
        Call this function to render the main page of the application.

    Returns:
        None
    """
    with ui.column().classes("absolute-center items-center"):
        ui.label(f'Hello {app.storage.user["username"]}!').classes("text-2xl")
        ui.button(
            on_click=lambda: (app.storage.user.clear(), ui.open("/login")),
            icon="logout",
        ).props("outline round")


@ui.page("/subpage")
def test_page() -> None:
    """
    This function displays a sub page in the UI.

    It uses the `label` function from the `ui` module to display the text "This is a sub page."

    Example usage:
    test_page()
    """
    ui.label("This is a sub page.")


@ui.page("/login")
def login() -> Optional[RedirectResponse]:
    """
    Function to handle user login.

    This function displays a login form with username and password fields.
    When the user clicks the "Log in" button or presses the Enter key in either
    the username or password field, the function attempts to authenticate the user.
    If the authentication is successful, the user is redirected to the home page.
    If the authentication fails, an error message is displayed.

    Returns:
        Optional[RedirectResponse]: If the user is already authenticated, returns
        a RedirectResponse object to redirect the user to the home page. Otherwise,
        returns None.

    Usage:
        Call this function to display the login form and handle user authentication.
        The function can be called from any part of the code where user login is required.

    Example:
        # Display the login form and handle user authentication
        response = login()
        if response is not None:
            # User is authenticated, redirect to the home page
            return response
        else:
            # User authentication failed, display an error message
            print("Authentication failed")

    Note:
        This function requires the following imports:
        from typing import Optional
        from nicegui import ui
        from nicegui.types import RedirectResponse
        from nicegui.storage import app, passwords
    """

    def try_login() -> None:
        """
        Attempts to authenticate the user by checking the provided username and password.

        If the username and password match, the user is considered authenticated and their
        username is stored in the app storage. The user is then redirected to the referrer
        path or the default path if no referrer path is available.

        If the username and password do not match, a notification is displayed indicating
        that the username or password is incorrect.

        Returns:
            None
        """
        if passwords.get(username.value) == password.value:
            app.storage.user.update({"username": username.value, "authenticated": True})
            ui.open(
                app.storage.user.get("referrer_path", "/")
            )  # go back to where the user wanted to go
        else:
            ui.notify("Wrong username or password", color="negative")

    if app.storage.user.get("authenticated", False):
        return RedirectResponse("/")
    with ui.card().classes("absolute-center"):
        username = ui.input("Username").on("keydown.enter", try_login)
        password = ui.input("Password", password=True, password_toggle_button=True).on(
            "keydown.enter", try_login
        )
        ui.button("Log in", on_click=try_login)
    return None


ui.run(storage_secret="THIS_NEEDS_TO_BE_CHANGED")
